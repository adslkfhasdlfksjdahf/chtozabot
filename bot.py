# - *- coding: utf- 8 - *-
import telebot
#multiprocess:
import multiprocessing
import os
#import threading
import time
import datetime
import sqlite3
import requests
# –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –ë–î
from db_main import *
import requests
import json
from telebot import types
from config import token, database_name, SFHH, EFHH, SSHH, ESHH, FHCM, SHCM, MOB
from secrets import token_bytes
from coincurve import PublicKey
from sha3 import keccak_256

bot = telebot.TeleBot(token)
# –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_tables()
global EthToken
EthToken = "7UQF8ZIRHENNVS6F3YKDRXPD1SF5AMHURD"
global pricestart
pricestart = 100
print(pricestart)
global betx
betx = 1.5
upordownitog = 0
global finishprice1
global finishprice2
finishprice1 = 0
finishprice2 = 0
global winwinbet1
global winwinbet2
winwinbet1 = 0
winwinbet2 = 0
global pricestart1
global pricestart2
pricestart1 = 0
pricestart2 = 0

#####################################
manager = multiprocessing.Manager()
# Define a list (queue) for tasks and computation results
tasks = manager.Queue()
results = manager.Queue()
pool = multiprocessing.Pool(processes=3)
processes = []

def is_first_half_hour():
    mint = datetime.now().minute
    if(mint>=SFHH and mint<=EFHH):
        return True
    elif(mint>=SSHH and mint<=ESHH):
        return False


def background():  # —Ñ–æ–Ω–æ–≤—ã–π def –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–∞ eth –≤ usd
    global pricestart
    global pricestart1
    global pricestart2
    global finishprice1
    global finishprice2
    pid = 'PID:'+ str(os.getpid())+' :: '
    print(pid+'Starting background()')
    while True:
        nowglaw = datetime.now().minute
        if nowglaw == 0 or nowglaw == 30:
            r = requests.get(
                'https://www.coingecko.com/price_charts/279/usd/24_hours.json').json()
            pricestart = r['stats'][-1][1]  # —Ü–µ–Ω–∞ eth –≤ usd
            if nowglaw == 0:
                pricestart1 = pricestart
                finishprice2 = pricestart


            if nowglaw == 30:
                pricestart2 = pricestart
                finishprice1 = pricestart

        #print(pid+str(pricestart))
        #print(pid+str(pricestart1))
        #print(pid+str(pricestart2))
        #print(pid+str(finishprice1))
        #print(pid+str(finishprice2))

        time.sleep(2)


def dapezda():  # —Ñ–æ–Ω–æ–≤—ã–π def –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–∞ eth –≤ usd
    global pricestart
    global finishprice1
    global finishprice2
    global winwinbet1
    global winwinbet2
    global pricestart1
    global pricestart2
    d = 0
    b = 0
    pid = 'PID:'+ str(os.getpid())+' :: '
    print(pid+'Starting dapezda()')
    while True:
        nowglaw = datetime.now().minute
        if nowglaw == 1:
            b = 0
            if d <= 0:
                if finishprice2 >= pricestart2:
                    winwinbet2 = 1

                elif finishprice2 <= pricestart2:
                    winwinbet2 = 0

        if nowglaw == 31:
            d = 0
            if b <= 0:
                if finishprice1 >= pricestart1:
                    winwinbet1 = 1

                elif finishprice1 <= pricestart1:
                    winwinbet1 = 0



        time.sleep(2)


def background_process_bets():
    global winwinbet1
    global winwinbet2
    global betx
    
    mint = datetime.now().minute
    pid = 'PID:'+ str(os.getpid())+' :: '
    print(pid+'Starting background_process_bets()')
    
    if(mint==FHCM or mint==SHCM):
        print(pid+'Starting process bets....')    
        if is_first_half_hour():
            #–ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —á–∞—Å–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç—É—Ç:
            winbets = get_bet(winwinbet1)
        else:
            #–≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —á–∞—Å–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç—É—Ç:
            winbets = get_bet(winwinbet2, True)


        print(pid+' Found bets:')
        print(winbets)
        
        for bet in winbets:
            win = get_user_ballance(bet.tg_id) + bet.bet_summ * betx
            print(pid+' User '+str(bet.tg_id)+' has winned '+str(win))
            update_user(bet.tg_id, {'balance': win})
            delete_bets(is_first_half_hour())
    time.sleep(60)

#pezdaaa = threading.Thread(name='dapezda', target=dapezda())
#pezdaaa.start()
#1
new_process = multiprocessing.Process(
    target=background
)
processes.append(new_process)
new_process.start()
#2
new_process = multiprocessing.Process(
    target=dapezda
)
#3 Clear Bets:
new_process = multiprocessing.Process(
    target=background_process_bets
)
processes.append(new_process)
new_process.start()

map(lambda new_process: new_process.join(), processes)


def check_stavka():

    mint = datetime.now().minute
    if(mint>=SFHH and mint<=EFHH):
        return 1
    elif(mint>=SSHH and mint<=ESHH):
        return 2
    else:
        return 0

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    print(user_id)
    if (not user_exists(user_id)):
        private_key = keccak_256(token_bytes(32)).digest()
        public_key = PublicKey.from_valid_secret(private_key).format(compressed=False)[1:]
        addr = keccak_256(public_key).digest()[-20:]
        addr = addr.hex()
        print('private_key:', private_key.hex())
        print('eth addr:', '0x' + addr)

        # create new user with wallet
        newuserdata = {'balance': 0, 'tg_id': user_id, 'wallet_addr': '0x' + str(addr),
                       'wallet_key': '' + str(private_key.hex())}
        add_new_user(newuserdata)
    
    bot.send_message(message.chat.id, "–≠—Ç–æ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä BetEther –¥–ª—è p2p —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∫—É—Ä—Å Ethereum \n\n‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å: \nhttps://graph.org/Instrukciya-kak-stavit-08-02", reply_markup=menu_keyboard, disable_web_page_preview=True)
    bot.register_next_step_handler(message, menu)


@bot.message_handler(content_types=['text'])
def menu(message):
    if message.text == "üí∞ –ö–æ—à–µ–ª—ë–∫ ETH":
        bal_ = 0
        if(user_exists(message.from_user.id)):
            bal_ = get_user(message.from_user.id).balance
        bot.send_message(message.from_user.id, f"ETH –∫–æ—à–µ–ª–µ–∫ —Ç—É—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–≤–µ–Ω {bal_}", reply_markup=balance, disable_web_page_preview=True)
        bot.register_next_step_handler(message, menu)

    if message.text == "üé≤ Betting":
        bot.send_message(message.from_user.id,
                         "–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫—É—Ä—Å ETH\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://graph.org/Instrukciya-kak-stavit-08-02",
                         reply_markup=betiti, disable_web_page_preview=True)
        bot.register_next_step_handler(message, menu)

    if message.text == "üöÄ –û —Å–µ—Ä–≤–∏—Å–µ":
        bot.send_message(message.from_user.id, "–≠—Ç–æ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä Bitoto –¥–ª—è p2p —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∫—É—Ä—Å Bitcoin\n\n‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä: bitoto.io/instruction\n\n–°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞: bitoto.io", reply_markup=servese, disable_web_page_preview=True)
        bot.register_next_step_handler(message, menu)
    if message.text == "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º":
        bot.send_message(message.from_user.id, "üíµ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ü§ù\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–æ–ª—É—á–∞–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –∫–æ–º–∏—Å—Å–∏–π —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞! üíµ\n\nüî• –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –¥–æ 7% –æ—Ç —Å—É–º–º—ã –≤—ã–∏–≥—Ä—ã—à–∞ —Ç–≤–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!!!\n\n1 —É—Ä–æ–≤–µ–Ω—å: 5%\n2 —É—Ä–æ–≤–µ–Ω—å: 2%\n\nüìå –ü—Ä–∏–º–µ—Ä: –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∏–≥—Ä–∞–ª 1 ETH, —Ç—ã –ø–æ–ª—É—á–∏—à—å –≤—ã–ø–ª–∞—Ç—É –≤  0.05 ETH –ï—Å–ª–∏ —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–≥–ª–∞—Å–∏—Ç –µ—â–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, —Ç–æ —Å –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö - —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ—â–µ 2%\n\n–í—ã—Ö–æ–¥–∏—Ç, —á—Ç–æ –µ—Å–ª–∏ —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –∏ –µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä –≤—ã–∏–≥—Ä–∞—é—Ç –∫–∞–∂–¥—ã–π –ø–æ 1 ETH, —Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å - 0.07 ETH –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.", disable_web_page_preview=True)
        bot.register_next_step_handler(message, menu)


@bot.message_handler(content_types=['text'])
def upstavkaa(message):
    cs = check_stavka()
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–∞", reply_markup=menu_keyboard)
        bot.register_next_step_handler(message, menu)
    elif cs == 0:
        bot.send_message(message.from_user.id, "–ò–≥—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞", reply_markup=menu_keyboard)
        bot.register_next_step_handler(message, menu)    
    else:
        user_id = message.from_user.id
        print(user_id)
        txtvopr = float(message.text)
        print(txtvopr)
        print('upstavkaa CS:', cs)
        
        if txtvopr>get_user_ballance(user_id).balance:
            bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", reply_markup=menu_keyboard)
            bot.register_next_step_handler(message, menu)
        
        else:
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
            if cs == 1:
                second_time = False
            elif cs == 2:
                second_time = True
                
            betdata = {'tg_id': user_id, 'bet_summ': (txtvopr), 'second_time': second_time, 'bet_target': 1}
            print(betdata)
            add_new_bet(betdata)
            update_user_ballance(user_id, {'balance': get_user_ballance(user_id).balance - txtvopr})
            
            bot.send_message(message.from_user.id, f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –í—ã—à–µ –Ω–∞ —Å—É–º–º—É {txtvopr} ETH", reply_markup=menu_keyboard)
            bot.register_next_step_handler(message, menu)


@bot.message_handler(content_types=['text'])
def outstavkaa(message):
    cs = check_stavka()
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–∞", reply_markup=menu_keyboard)
        bot.register_next_step_handler(message, menu)
    elif cs == 0:
        bot.send_message(message.from_user.id, "–ò–≥—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞", reply_markup=menu_keyboard)
        bot.register_next_step_handler(message, menu)    
    else:
        user_id = message.from_user.id
        print(user_id)
        txtvopr = float(message.text)
        print(txtvopr)
        print('outstavka CS:', cs)
        
        if txtvopr>get_user_ballance(user_id).balance:
            bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", reply_markup=menu_keyboard)
            bot.register_next_step_handler(message, menu)
        
        else:
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
            if cs == 1:
                second_time = False
            elif cs == 2:
                second_time = True
                
            betdata = {'tg_id': user_id, 'bet_summ': (txtvopr), 'second_time': second_time, 'bet_target': 0}
            print(betdata)
            add_new_bet(betdata)
            update_user_ballance(user_id, {'balance': get_user_ballance(user_id).balance - txtvopr})
            
            bot.send_message(message.from_user.id, f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –í—ã—à–µ –Ω–∞ —Å—É–º–º—É {txtvopr} ETH", reply_markup=menu_keyboard)
            bot.register_next_step_handler(message, menu)

@bot.message_handler(content_types=['text'])
def inputoutsumm():
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–∞", reply_markup=menu_keyboard)
        bot.register_next_step_handler(message, menu)
    else:
        user_id = message.from_user.id
        print(user_id)
        txtvopr = float(message.text)
        print(txtvopr)
        
        update_out(user_id, {'out_summ': txtvopr})
        bot.send_message(message.from_user.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {txtvopr} ETH\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞", reply_markup=menu_keyboard)
        bot.register_next_step_handler(message, inputoutaddr)

@bot.message_handler(content_types=['text'])
def inputoutaddr():
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–∞", reply_markup=menu_keyboard)
        bot.register_next_step_handler(message, menu)
    else:
        user_id = message.from_user.id
        print(user_id)
        txtvopr = message.text
        print(txtvopr)
        
        update_out(user_id, {'wallet_addr': txtvopr})
        bot.send_message(message.from_user.id, f"–ê–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: {txtvopr} ETH\n–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–≤–æ–¥–∞!", reply_markup=menu_keyboard)
        bot.register_next_step_handler(message, menu)
        
@bot.callback_query_handler(func=lambda call: True)
def callback_processing(call):
    global walletn
    global wallet
    global EthToken

    if call.data == "refreshbal":
        telegram_user_id = call.from_user.id
        bal_ = 1
        bot.answer_callback_query(call.id)
        usr = get_user(call.from_user.id, False)
        addr = usr['wallet_addr']
        response = requests.get(f"https://api.etherscan.io/api?module=account&action=balance&address={addr}&tag=latest&apikey={EthToken}")
        balnowwal = int(response.json()["result"]) / 1000000000000000000
        #–±–µ—Ä–µ—Ç –Ω—ã–Ω–µ—à–Ω–∏–π –±–∞–ª–∞–Ω—Å –∞–¥—Ä–µ—Å–∞ —ç—Ñ–∏—Ä–∏—É–º

        usr = get_user(call.from_user.id, False)
        baloldwal = usr['balance']
        #–±–µ—Ä–µ—Ç —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–¥ user_wallet

        razbal = balnowwal - baloldwal
        #–Ω–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–Ω–∏—Ü—É –±–∞–ª–∞–Ω—Å–æ–≤(–Ω–æ–≤–≥–æ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ)

        wallet = get_user_ballance(call.from_user.id, False)
        oldbalhum = wallet['balance']
        #–±–µ—Ä–µ—Ç —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –±–¥ user_ballance
        
        newbalhum = oldbalhum + razbal
        #—Å—É–º–º–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –±–∞–ª–∞–Ω—Å–æ–≤ –∞–¥—Ä–µ—Å–æ–≤ –∏ –Ω—ã–Ω–µ—à–Ω–∏–π –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å

        update_user(call.from_user.id, {'balance': balnowwal})
        #–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω—ã–Ω–µ—à–Ω–∏–π –±–∞–ª–∞–Ω—Å –∞–¥—Ä–µ—Å–∞ –≤ –±–¥ user_wallet

        update_user_ballance(telegram_user_id, {'balance': newbalhum})
        #–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ –≤ –±–¥ user_ballance

        wallet = get_user_ballance(call.from_user.id, False)
        bal_ = wallet['balance']


        message = bot.send_message(call.from_user.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal_}")

    if call.data == "upst":
        bot.answer_callback_query(call.id)
        message = bot.send_message(call.from_user.id, f"–ö–∞–∫—É—é —Å—É–º–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ?",
                                   reply_markup=back_keyboard)
        bot.register_next_step_handler(message, upstavkaa)

    if call.data == "outst":
        bot.answer_callback_query(call.id)
        message = bot.send_message(call.from_user.id, f"–ö–∞–∫—É—é —Å—É–º–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ?",
                                   reply_markup=back_keyboard)
        bot.register_next_step_handler(message, outstavkaa)
    if call.data == "out-money":
        user = get_user(call.from_user.id)
        if(user.balance <= MOB):
            bot.send_message(call.from_user.id, f"–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ {MOB}", reply_markup=back_keyboard)
        else:
            message = bot.send_message(call.from_user.id, f"–ö–∞–∫—É—é —Å—É–º–º—É —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏?",
                                       reply_markup=back_keyboard)
            bot.register_next_step_handler(message, inputoutsumm)        
    if call.data == "in-money":
        # check if user exsist or not
        if(not user_exists(call.from_user.id)):
            private_key = keccak_256(token_bytes(32)).digest()
            public_key = PublicKey.from_valid_secret(private_key).format(compressed=False)[1:]
            addr = keccak_256(public_key).digest()[-20:]            
            addr = addr.hex()
            print('private_key:', private_key.hex())
            print('eth addr:', '0x'+addr )            
            
            #create new user with wallet
            newuserdata = {'balance':0, 'tg_id': call.from_user.id, 'wallet_addr': '0x'+ str(addr), 'wallet_key': ''+ str(private_key.hex())}
            add_new_user(newuserdata)
            
        else:
            usr = get_user(call.from_user.id, False)
            private_key = usr['wallet_key']
            addr = usr['wallet_addr']
            print('private_key:', private_key)
            print('eth addr:', addr)
            
        bot.answer_callback_query(call.id)
        bot.send_message(call.from_user.id, f"–í–æ—Ç —Ç–≤–æ–π ETH –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
        bot.send_message(call.from_user.id, f"{addr}",reply_markup=refreshbaba)

    if call.data == "igra":
        nowm = datetime.now().minute
        if 0 <= nowm <= 10 or 30 <= nowm <= 40:
            bot.answer_callback_query(call.id)
            bot.send_message(call.from_user.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:", reply_markup=interv)
        else:
            bot.answer_callback_query(call.id)
            ost = 2
            if 40 <= nowm <= 60:
                ost = 60 - nowm - 1
            if 10 <= nowm <= 30:
                ost = 30 - nowm - 1
            bot.send_message(call.from_user.id,
                             f"üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n\n–î–æ –Ω–∞—á–∞–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å {ost} –º–∏–Ω—É—Ç")
    if call.data == "30min":
        r = requests.get(
                'https://www.coingecko.com/price_charts/279/usd/24_hours.json').json()
        priceprice = r['stats'][-1][1]  # —Ü–µ–Ω–∞ eth –≤ usd
        nowm = datetime.now().minute
        bot.answer_callback_query(call.id)
        if 30 <= nowm <= 59:
            ost2 = 60 - nowm
        if 0 <= nowm <= 29:
            ost2 = 30 - nowm
        textvopr = get_user(call.from_user.id)
        print(textvopr)
        bot.send_message(call.from_user.id,
                     f"üí•üé∞ 30 –º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª\n\n–£ —Ç–µ–±—è –µ—Å—Ç—å –≤—Ä–µ–º—è —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É —á—Ç–æ –∫—É—Ä—Å ETH –±—É–¥–µ—Ç –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ —á–µ–º {pricestart}$ —á–µ—Ä–µ–∑ {ost2} –º–∏–Ω—É—Ç—ã\n\n–ü–æ—Å—Ç–∞–≤–∏–ª–∏ –í—ã—à–µ: 0.0000 ETH\n\n–ü–æ—Å—Ç–∞–≤–∏–ª–∏ –ù–∏–∂–µ: 0.0000 ETH\n\nETH –±—É–¥–µ—Ç –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ —á–µ–º {pricestart}$ —á–µ—Ä–µ–∑ {ost2} –º–∏–Ω—É—Ç—ã –ø–æ –ø–∞—Ä–µ Binance ETH/USDT ?\n\n–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å Binance: {priceprice}$",
                     reply_markup=stavka)

    elif call.data == "my-igra":
        bot.answer_callback_query(call.id)
        textvopr = get_user(call.from_user.id)
        print(textvopr)
        bot.send_message(call.from_user.id,
                         "üöÄ –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —É—á–∞—Å—Ç–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —É—á–∞—Å—Ç–∏–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ")
    #elif call.data == "out-money":
    #    message = bot.send_message(call.from_user.id, "–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –≤–Ω–µ—à–Ω–µ–≥–æ ETH –∫–æ—à–µ–ª—å–∫–∞")
    #    bot.register_next_step_handler(message, outoutmoney)


@bot.message_handler(content_types=['text'])
def outoutmoney(message):
    message = bot.send_message(message.from_user.id, "–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞", reply_markup=menu_keyboard)
    bot.register_next_step_handler(message, menu)



refreshbaba = types.InlineKeyboardMarkup(row_width=1)

refreshbaba.add(types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data="refreshbal"))


balance = types.InlineKeyboardMarkup(row_width=2)

balance.add(types.InlineKeyboardButton('üì• –í–Ω–µ—Å—Ç–∏', callback_data="in-money"),
            types.InlineKeyboardButton('üì§ –í—ã–≤–µ—Å—Ç–∏', callback_data="out-money"),
            types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data="refreshbal"))

servese = types.InlineKeyboardMarkup(row_width=2)

servese.add(types.InlineKeyboardButton('‚òï –ß–∞—Ç', url='https://t.me/EthBet_chat'),
            types.InlineKeyboardButton('üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/EthBet_Support'),
            types.InlineKeyboardButton('üìÆ –ù–æ–≤–æ—Å—Ç–∏', url='https://t.me/News_EthBet'),
            types.InlineKeyboardButton('üìã FAQ', url='https://graph.org/Instrukciya-kak-stavit-08-02'))

betiti = types.InlineKeyboardMarkup(row_width=2)

betiti.add(types.InlineKeyboardButton('üé∞ –†–æ–∑—ã–≥—Ä—ã—à–∏', callback_data="igra"),
           types.InlineKeyboardButton('üéÆ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏', callback_data="my-igra"),
           types.InlineKeyboardButton('üîï –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="off-talk"))

menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
menu_keyboard.add(types.KeyboardButton("üí∞ –ö–æ—à–µ–ª—ë–∫ ETH"), types.KeyboardButton("üé≤ Betting"),
                  types.KeyboardButton("üöÄ –û —Å–µ—Ä–≤–∏—Å–µ"), types.KeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º"))

yesno = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
yesno.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))

interv = types.InlineKeyboardMarkup(row_width=2)

interv.add(types.InlineKeyboardButton('‚åõ 30 –º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª', callback_data="30min"))

stavka = types.InlineKeyboardMarkup(row_width=2)

stavka.add(types.InlineKeyboardButton('üìà –í—ã—à–µ', callback_data="upst"),
           types.InlineKeyboardButton('üìâ –ù–∏–∂–µ', callback_data="outst"),
           types.InlineKeyboardButton('üîÉ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data="30min"))

back_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
back_keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

bot.infinity_polling(True)